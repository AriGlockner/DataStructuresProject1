GitHub Repo Link:
https://github.com/AriGlockner/DataStructuresProjects/

10% Log (~1 hour):
Continued project 2 from where project 1 left off
Added isSorted method to NumList interface
Implemented isSorted method in NumArrayList class
Implemented toString/add/insert/size methods to NumLinkedList class

50% Log (~10 hours):
Implemented Remove/Contains/Lookup/equals/removeDuplicates/isSorted methods in NumLinkedList class
Made NumLinkedList implement Iterable and added a few helper methods meant to help Iterable interface
Adjusted toString method in NumLinkedList class to use a for each loop implementation
Changed tests for toString/add/insert/size and created tests for isSorted/contains/removeDuplicates in TestNumLinkedList class

Struggled a little with figuring out remove/removeDuplicates methods for NumLinkedList class due to NullPointerExceptions. Figured out what the problem was by creating temporary print lines to show me where the pointer nodes were at in the list and then easily fixed the problems.

I realized that using StringBuilder is faster than "" += "" because StringBuilder creates the same String while using fewer objects to create the String so I implemented the
toString method using the StringBuilder Object.

I realized that the equals methods were written exactly the same in both the NumArrayList and NumLinkedList classes so I changed the NumList interface to make the equals method a default method. By creating the equals method as a default method in the interface, I could delete the equals methods in the NumArrayList and NumLinkedList classes and I don't need to rewrite that exact same method for future classes that may require it.

While I was able to make the equals method a default method in the NumList interface, I am struggling with trying to figure out how to do the other methods in the NumList interface because many of the other methods require having access to the list. I am currently trying to figure out how do I get the list to be visable to the Interface, but not to everything. The other problem I ran into here was much easier to fix. I needed to make the NumArrayList class implement the Iterable interface and the NumList interface extend the Iterable interface.

90% Log (~25 hours):
Implemented all methods. Need to finish writing test cases. Need to make a few methods more efficient. Need to fix the isSorted method in the NumList interface.

I found out that by putting the iterator method in the NumList interface, I could then do a for each loop in the interface so I could use default methods within the interface rather than recreating the same method every time in the lists.

I had to think about the reverse method in NumArrayList for a little bit, then I realized I could use a temporary variable. The NumLinkedList was much more tricky for me as I ran into an out of memory error due to having the list back call the front. Once I realized that's where the problem came from, the method became much simpler.

I created a working union method, but I may change my implementation. I used a for each loop on list 2 to add elements into list 1 and return list 1. There may be a better way to write it than what I did. I created a few helper methods to help me implement the union method.

100% Log (~30 hours):
Figuring out what to do about the Union method was tricky. Most of it was pretty straightforward, but the part I struggled with was figuring out how to efficiently insert each element in list 2 to list 1 in a sorted way. The part that was tricky was not the implementation itself, rather how to I make it so it doesn't need to check the isSorted method every time its called. I couldn't figure that out so I created a precondition saying call this method only when the list is already sorted. This works because if the method isn't already sorted before calling that method, it will still add the element, but it won't be sorted like it was before the element was added.

I realized the problems I had with the isSorted method could be fixed by using a boolean to make sure it doesn't compare values for the 1st iteration through the loop.

Testing everything was pretty straightforward.
